(undo-tree-save-format-version . 1)
"02675593453f45052b8aef9f1f7e51b6c2f2f54b"
[nil nil nil nil (25802 27972 234904 891000) 0 nil]
([nil nil ((28 . 34) (#("Str" 0 3 (fontified nil)) . 28) (28 . 31) (#("String" 0 6 (fontified nil)) . -28) (28 . 34) (#("Str" 0 3 (face font-lock-type-face fontified t)) . -28) (undo-tree-id4 . -3) 31 (29 . 31) (18 . 29) (17 . 19) (1 . 17) (t 25802 27972 255153 107000)) nil (25802 28032 106933 881000) 0 nil])
([nil nil ((46 . 52) (#("Str" 0 3 (fontified nil)) . 46) (46 . 49) (#("String" 0 6 (fontified nil)) . -46) (46 . 52) (#("Str" 0 3 (face font-lock-type-face fontified t)) . -46) (undo-tree-id0 . -3) 49 (47 . 49) (#("T" 0 1 (face font-lock-type-face fontified t)) . -47) (undo-tree-id1 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -48) (undo-tree-id2 . -1) 49 (42 . 49) (34 . 42) (#(" " 0 1 (fontified t)) . -34) (undo-tree-id3 . -1) 35 (34 . 35)) nil (25802 28032 106932 611000) 0 nil])
([nil nil ((56 . 60) (#("    " 0 4 (fontified nil)) . 56) (56 . 60) (55 . 57) (53 . 56)) nil (25802 28032 106921 951000) 0 nil])
([nil nil ((62 . 63)) nil (25802 28032 106919 121000) 0 nil])
([nil nil ((73 . 86) (#("H" 0 1 (face font-lock-type-face fontified t)) . -73) (undo-tree-id5 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -74) (undo-tree-id6 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -75) (undo-tree-id7 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -76) (undo-tree-id8 . -1) 77 (73 . 77) (#("R" 0 1 (face font-lock-type-face fontified t)) . -73) (undo-tree-id9 . -1) 74 (70 . 74) (#("y" 0 1 (face font-lock-constant-face fontified t)) . -70) (undo-tree-id10 . -1) (#(":" 0 1 (fontified t)) . -71) (undo-tree-id11 . -1) (#(":" 0 1 (fontified t)) . -72) (undo-tree-id12 . -1) 73 (67 . 73) (59 . 67) (#("R" 0 1 (face font-lock-type-face fontified t)) . -59) (undo-tree-id13 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -60) (undo-tree-id14 . -1) (#("q" 0 1 (face font-lock-type-face fontified t)) . -61) (undo-tree-id15 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -62) (undo-tree-id16 . -1) 63 (60 . 63) (59 . 60) (t 25802 28032 136663 609000)) nil (25802 28202 416770 356000) 0 nil])
([nil nil ((#("u" 0 1 (face font-lock-keyword-face fontified t)) . 59)) nil (25802 28202 416761 476000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . 59)) nil (25802 28202 416761 246000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 59)) nil (25802 28202 416760 876000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 59)) nil (25802 28202 416758 116000) 0 nil])
([nil nil ((82 . 90) (#(" " 0 1 (fontified t)) . -82) (undo-tree-id17 . 1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) 83 (t 25802 28202 424123 112000)) nil (25802 28226 527568 157000) 0 nil])
([nil nil ((90 . 91) (t 25802 28226 556330 762000)) nil (25802 28239 943988 926000) 0 nil])
([nil nil ((97 . 112) (90 . 97) (89 . 91) (#("\"" 0 1 (fontified nil)) . -89) (89 . 90) (t 25802 28239 953446 119000)) nil (25802 28260 606291 814000) 0 nil])
([nil nil (112) nil (25802 28392 421520 62000) 0 nil])
([nil nil ((112 . 118) (t 25802 28260 613624 104000)) nil (25802 28401 381343 507000) 0 nil] [nil nil ((59 . 65) (t 25802 28260 613624 104000)) ((#("/LOGIN" 0 1 (fontified t) 1 6 (face font-lock-type-face fontified t)) . 59) (undo-tree-id20 . -5) (undo-tree-id21 . -5)) (25802 28392 421262 120000) 0 nil])
([nil nil ((#("http://172.23.0.4:8000" 0 22 (face font-lock-string-face fontified t)) . 90) (undo-tree-id41 . -21) (undo-tree-id42 . -21) (undo-tree-id43 . -21) (undo-tree-id44 . -21) (undo-tree-id45 . -21) (t 25802 28401 409839 974000)) nil (25802 28606 238472 562000) 0 nil])
nil
([nil nil ((#("/" 0 1 (face font-lock-string-face fontified t)) . 90) (undo-tree-id39 . 1) (undo-tree-id40 . 1)) nil (25802 28606 238470 802000) 0 nil])
([nil nil ((100 . 101) (#("}" 0 1 (fontified nil)) . -99) (99 . 100) (#("}" 0 1 (fontified nil)) . -99) (99 . 100) (59 . 60) (97 . 99) (104 . 105) (#(")" 0 1 (face font-lock-string-face fontified nil)) . -104) (104 . 105) (#(")" 0 1 (fontified t)) . -97) (undo-tree-id37 . -1) 98 (96 . 98) (89 . 96) (#("forma" 0 5 (fontified nil)) . 89) (89 . 94) (#("format!" 0 7 (fontified nil)) . -89) (89 . 96) (#("forma" 0 2 (fontified t) 2 3 (fontified t) 3 5 (fontified t)) . -89) (undo-tree-id38 . -5) 94 (89 . 94)) nil (25802 28606 238469 762000) 0 nil])
([nil nil ((102 . 107) (#("l" 0 1 (face font-lock-string-face fontified t)) . -102) (undo-tree-id24 . -1) 103 (101 . 103) (#("}" 0 1 (fontified nil)) . -100) (100 . 101) (#("}" 0 1 (face rust-string-interpolation fontified nil)) . -100) (100 . 101) (99 . 101) (98 . 100) (#("\"" 0 1 (fontified nil)) . -98) (98 . 99) (#("{},\"login\"" 0 1 (fontified t) 1 3 (fontified t) 3 9 (face font-lock-string-face fontified t) 9 10 (face font-lock-string-face fontified t)) . 98) (undo-tree-id25 . 7) (undo-tree-id26 . -9) (undo-tree-id27 . -4) (undo-tree-id28 . 6) (undo-tree-id29 . -4) (undo-tree-id30 . -4) (undo-tree-id31 . -4) (undo-tree-id32 . -4) (undo-tree-id33 . -4) (undo-tree-id34 . -3) (undo-tree-id35 . -2) (undo-tree-id36 . -2) 100) nil (25802 28606 238467 582000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-string-face fontified t)) . 101)) nil (25802 28606 238463 302000) 0 nil])
([nil nil ((1 . 23) (108 . 108) (108 . 116) (#("APP" 0 3 (fontified nil)) . 108) (108 . 111) (#("APP_HOST (use super::APP_HOST)" 0 30 (fontified nil)) . -108) (108 . 138) (#("APP" 0 3 (face font-lock-type-face fontified t)) . -108) (undo-tree-id22 . -1) (undo-tree-id23 . -3) 111 (107 . 111)) nil (25802 28606 238461 32000) 0 nil])
([nil nil ((88 . 97) (82 . 88) (t 25802 28606 258616 251000)) nil (25802 28761 341833 486000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 125)) nil (25802 28761 341832 596000) 0 nil])
([nil nil ((160 . 162) (154 . 160) (#("as_re" 0 5 (fontified nil)) . 154) (154 . 159) (#("as_ref (as AsRef)" 0 17 (fontified nil)) . -154) (154 . 171) (#("as_re" 0 5 (fontified t)) . -154) (undo-tree-id46 . -5) (undo-tree-id47 . -5) (undo-tree-id48 . -5) (undo-tree-id49 . -5) (undo-tree-id50 . -5) (undo-tree-id51 . -5) (undo-tree-id52 . -5) (undo-tree-id53 . -5) (undo-tree-id54 . -5) 159 (153 . 159) (#("." 0 1 (fontified t)) . -153) (undo-tree-id55 . -1) (#("t" 0 1 (fontified t)) . -154) (undo-tree-id56 . -1) (#("o" 0 1 (fontified t)) . -155) (undo-tree-id57 . -1) 156 (153 . 156)) nil (25802 28761 341830 146000) 0 nil])
([nil nil ((125 . 126) (t 25802 28761 738968 590000)) nil (25802 28775 197377 699000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 154) (t 25802 28775 206085 864000)) nil (25802 28809 663282 960000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . 154)) nil (25802 28809 663282 740000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . 154)) nil (25802 28809 663282 580000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 154)) nil (25802 28809 663282 420000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-keyword-face fontified t)) . 154)) nil (25802 28809 663282 220000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 154)) nil (25802 28809 663282 80000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . 154)) nil (25802 28809 663281 810000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . 154) (undo-tree-id58 . -1)) nil (25802 28809 663281 430000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 154)) nil (25802 28809 663276 210000) 0 nil])
([nil nil ((127 . 128)) nil (25802 28809 663273 660000) 0 nil])
([nil nil ((170 . 172) (#(")" 0 1 (fontified t)) . -170) (undo-tree-id59 . -1) 171 (170 . 171) (#(")" 0 1 (fontified nil)) . -170) (168 . 171) (#("p" 0 1 (fontified t)) . -168) (undo-tree-id60 . -1) 169 (166 . 169) (157 . 165) (#("	" 0 1 (fontified t)) . -157) 158 (158 . 158) (158 . 159) (156 . 158) (t 25802 28809 714386 429000)) nil (25802 28851 138617 515000) 0 nil])
([nil nil ((171 . 178) (t 25802 28851 533750 803000)) nil (25802 28969 568275 139000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -22) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (#("s" 0 1 (fontified t)) . -23) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -24) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (#(" " 0 1 (fontified t)) . -25) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (#("s" 0 1 (face font-lock-constant-face fontified t)) . -26) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -27) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (#("r" 0 1 (face font-lock-constant-face fontified t)) . -28) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (#("d" 0 1 (face font-lock-constant-face fontified t)) . -29) (undo-tree-id158 . -1) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -30) (undo-tree-id159 . -1) (#("_" 0 1 (face font-lock-constant-face fontified t)) . -31) (undo-tree-id160 . -1) (#("j" 0 1 (face font-lock-constant-face fontified t)) . -32) (undo-tree-id161 . -1) 33 (32 . 33) (29 . 32) (22 . 29) (21 . 22) 20) nil (25802 28969 568271 439000) 0 nil])
([nil nil ((41 . 43) (#("m" 0 1 (fontified t)) . -41) (undo-tree-id162 . -1) 42 (37 . 42) (36 . 37) (#("(" 0 1 (fontified nil)) . -36) (undo-tree-id163 . -1) (#(")" 0 1 (fontified t)) . 37) (36 . 38) (22 . 36) (21 . 22) (t 25802 28969 968783 580000) 16) nil (25802 28998 594875 527000) 0 nil])
([nil nil ((246 . 256) (236 . 245) (235 . 237) (#("\"" 0 1 (fontified nil)) . -235) (235 . 236) (229 . 235) (218 . 229) (#(" " 0 1 (face font-lock-string-face fontified t)) . -217) (undo-tree-id164 . -1) 218 (208 . 218) (207 . 209) (#("\"" 0 1 (fontified nil)) . -207) (207 . 208) (202 . 207) (203 . 204) (#("	    " 0 5 (fontified nil)) . 202) (202 . 207) (201 . 203) (200 . 202) (t 25802 28998 624033 633000)) nil (25802 29119 96578 50000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 255) (t 25802 29120 5093 269000)) nil (25802 29138 183618 71000) 0 nil] [nil nil ((194 . 195) (t 25802 29045 846445 761000)) ((#("&" 0 1 (face rust-ampersand-face fontified t)) . 194) (t 25802 29114 660046 593000)) (25802 29114 111961 835000) 0 nil])
([nil nil ((194 . 195) (t 25802 29138 206252 235000)) nil (25802 29147 5338 425000) 0 nil])
nil
([nil nil ((256 . 257) (t 25802 29147 24329 264000)) nil (25802 29159 631244 50000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 256) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (t 25802 29159 690439 698000)) nil (25802 29177 819603 834000) 0 nil])
([nil nil ((#("{
	    \"username:\": username,
	    \"password:\" password
	}));
" 0 2 (fontified t) 2 7 (fontified t) 7 18 (face font-lock-string-face fontified t) 18 20 (fontified t) 20 30 (fontified t) 30 35 (fontified t) 35 46 (face font-lock-string-face fontified t) 46 55 (fontified t) 55 56 (fontified t) 56 58 (fontified t) 58 59 (fontified t) 59 60 (fontified t) 60 61 (fontified t) 61 62 (fontified t)) . 201) (undo-tree-id912 . 7) (undo-tree-id913 . -61) (undo-tree-id914 . -61) (undo-tree-id915 . -61) (undo-tree-id916 . 7) (undo-tree-id917 . -16) (undo-tree-id918 . -16) (undo-tree-id919 . -16) (undo-tree-id920 . -16) (undo-tree-id921 . -16) (undo-tree-id922 . -16) (undo-tree-id923 . -16) (undo-tree-id924 . -16) (undo-tree-id925 . -16) (undo-tree-id926 . -16) (undo-tree-id927 . -16) (undo-tree-id928 . -16) (undo-tree-id929 . -16) (undo-tree-id930 . -16) (undo-tree-id931 . -16) (undo-tree-id932 . -16) (undo-tree-id933 . -16) (undo-tree-id934 . -16) (undo-tree-id935 . -16) (undo-tree-id936 . -16) (undo-tree-id937 . -16) (undo-tree-id938 . -16) (undo-tree-id939 . -16) (undo-tree-id940 . -16) (undo-tree-id941 . -16) (undo-tree-id942 . -16) (undo-tree-id943 . -16) (undo-tree-id944 . -16) (undo-tree-id945 . -44) (undo-tree-id946 . -44) (undo-tree-id947 . -44) (undo-tree-id948 . -44) (undo-tree-id949 . -44) (undo-tree-id950 . -44) (undo-tree-id951 . -44) (undo-tree-id952 . -44) (undo-tree-id953 . -44) (undo-tree-id954 . -44) (undo-tree-id955 . -44) (undo-tree-id956 . -44) (undo-tree-id957 . -44) (undo-tree-id958 . -44) (undo-tree-id959 . -44) (undo-tree-id960 . -44) (undo-tree-id961 . -44) (undo-tree-id962 . -44) (undo-tree-id963 . -44) (undo-tree-id964 . -44) (undo-tree-id965 . -44) (undo-tree-id966 . -44) (undo-tree-id967 . -44) (undo-tree-id968 . -44) (undo-tree-id969 . -44) (undo-tree-id970 . -44) (undo-tree-id971 . -44) (undo-tree-id972 . -44) (undo-tree-id973 . -56) (undo-tree-id974 . -61) (undo-tree-id975 . -61) (undo-tree-id976 . -61) (undo-tree-id977 . -61) (undo-tree-id978 . -61) (undo-tree-id979 . -61) (undo-tree-id980 . -61) (undo-tree-id981 . -61) (undo-tree-id982 . -61) (undo-tree-id983 . -61) (undo-tree-id984 . -61) (undo-tree-id985 . -61) (undo-tree-id986 . -61) (undo-tree-id987 . -61) (undo-tree-id988 . -61) (undo-tree-id989 . -61) (undo-tree-id990 . -61) (undo-tree-id991 . -61) (undo-tree-id992 . -61) (undo-tree-id993 . -61) (undo-tree-id994 . -61) (undo-tree-id995 . -61) (undo-tree-id996 . -61) (undo-tree-id997 . -61) (undo-tree-id998 . -54) (undo-tree-id999 . -61) (undo-tree-id1000 . -61) (undo-tree-id1001 . -61) (undo-tree-id1002 . -61) (undo-tree-id1003 . -61) (undo-tree-id1004 . -61) (undo-tree-id1005 . -62) 262 (t 25802 29178 8440 638000)) nil (25802 29243 752065 216000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t)) . 201) (undo-tree-id907 . 1) (undo-tree-id908 . 1) (undo-tree-id909 . 1) (undo-tree-id910 . -1) (undo-tree-id911 . -1)) nil (25802 29243 752042 536000) 0 nil])
([nil nil ((197 . 201) (#("m" 0 1 (fontified t)) . -197) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (#("n" 0 1 (fontified t)) . -198) (undo-tree-id169 . -1) (undo-tree-id170 . -1) 199 (194 . 199) (193 . 195) (#("(" 0 1 (fontified t)) . -193) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (#("&" 0 1 (fontified t)) . -194) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (#("j" 0 1 (fontified t)) . -195) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (#("s" 0 1 (fontified t)) . -196) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (#("o" 0 1 (fontified t)) . -197) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (#("n" 0 1 (fontified t)) . -198) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (#("!" 0 1 (fontified t)) . -199) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (#("(" 0 1 (fontified t)) . -200) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) 201) nil (25802 29243 752029 316000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -179) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (#(" " 0 1 (fontified t)) . -180) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (#(" " 0 1 (fontified t)) . -181) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (#(" " 0 1 (fontified t)) . -182) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (#(" " 0 1 (fontified t)) . -183) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (#(" " 0 1 (fontified t)) . -184) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (#(" " 0 1 (fontified t)) . -185) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (#(" " 0 1 (fontified t)) . -186) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (#(" " 0 1 (fontified t)) . -187) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) 188 (t 25802 29244 434476 207000)) nil (25802 29267 244299 767000) 0 nil])
([nil nil ((193 . 194)) nil (25802 29267 244284 357000) 0 nil])
([nil nil ((191 . 193) (t 25802 29267 726502 904000)) nil (25802 29292 106422 795000) 0 nil])
([nil nil ((#(".json(json!({}));" 0 5 (fontified t) 5 6 (fontified t) 6 11 (face font-lock-preprocessor-face fontified t) 11 12 (fontified t) 12 14 (fontified t) 14 15 (fontified t) 15 17 (fontified t)) . 179) (undo-tree-id1032 . 4) (undo-tree-id1033 . -16) (undo-tree-id1034 . 16) (undo-tree-id1035 . -2) (undo-tree-id1036 . -2) (undo-tree-id1037 . -2) (undo-tree-id1038 . -2) (undo-tree-id1039 . -2) (undo-tree-id1040 . 3) (t 25802 29292 499538 832000)) nil (25802 29304 193858 761000) 0 nil])
([nil nil ((179 . 180)) nil (25802 29304 193847 881000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -181) (undo-tree-id1041 . -4) (185 . 186) (#("}" 0 1 (fontified nil)) . -185) (185 . 186) (180 . 185) (t 25802 29304 224558 423000) 179) nil (25802 29309 730410 706000) 0 nil])
([nil nil ((186 . 187) (179 . 186) (#("." 0 1 (fontified t)) . -179) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (#("j" 0 1 (fontified t)) . -180) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (#("s" 0 1 (fontified t)) . -181) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (#("p" 0 1 (fontified t)) . -182) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) 183 (179 . 183) (#(";" 0 1 (fontified t)) . -179) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) 180 (t 25802 29309 738568 203000)) nil (25802 29326 934129 197000) 0 nil])
([nil nil ((192 . 194) (187 . 193) (185 . 187) (t 25802 29327 381601 858000)) nil (25802 29340 82108 602000) 0 nil])
([nil nil ((229 . 238) (227 . 228) (219 . 227) (218 . 220) (#("\"" 0 1 (fontified nil)) . -218) (218 . 219) (216 . 218) (206 . 216) (204 . 205) (196 . 204) (195 . 197) (#("\"" 0 1 (fontified nil)) . -195) (195 . 196) (194 . 195) (195 . 199) (#("	" 0 1 (fontified nil)) . 194) (194 . 195) (193 . 195) (t 25802 29340 90628 279000)) nil (25802 29364 546815 724000) 0 nil])
([nil nil ((238 . 239) (t 25802 29364 556684 84000)) nil (25802 29368 327791 4000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 215) (t 25802 29368 337693 273000)) nil (25802 29383 45194 991000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 237)) nil (25802 29383 45192 251000) 0 nil])
([nil nil ((215 . 216) (t 25802 29383 451731 486000)) nil (25802 29391 591784 298000) 0 nil])
([nil nil ((238 . 239) (t 25802 29391 660753 211000)) nil (25802 29395 692105 137000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 215) (t 25802 29395 714764 189000)) nil (25802 29428 599233 890000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 237) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1)) nil (25802 29428 599231 640000) 0 nil])
([nil nil ((215 . 216) (t 25802 29428 607859 132000)) nil (25802 29468 228443 735000) 0 nil])
([nil nil ((238 . 239)) nil (25802 29468 228443 175000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 238)) nil (25802 29468 228440 585000) 0 nil])
([nil nil ((179 . 249) (#(".json(&json!({
	\"username:\" username,
	\"password:\" password
    " 0 5 (fontified t) 5 6 (fontified t) 6 7 (face rust-ampersand-face fontified t) 7 12 (face font-lock-preprocessor-face fontified t) 12 13 (fontified t) 13 15 (fontified t) 15 16 (fontified t) 16 27 (face font-lock-string-face fontified t) 27 28 (fontified t) 28 37 (fontified t) 37 38 (fontified t) 38 39 (fontified t) 39 50 (face font-lock-string-face fontified t) 50 59 (fontified t) 59 60 (fontified t) 60 64 (fontified t)) . 179) (undo-tree-id0 . 5) (undo-tree-id1 . -35) (undo-tree-id2 . -35) (undo-tree-id3 . 27) (undo-tree-id4 . -35) (undo-tree-id5 . -35) (undo-tree-id6 . 5) (t 25802 29468 627988 45000)) nil (25802 29818 61242 660000) 0 nil])
([nil nil ((249 . 250) (t 25802 29780 203388 4000)) nil (25802 29818 61227 300000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 249) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (t 25802 29818 464597 498000)) nil (25802 29833 449333 661000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -252) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (#(" " 0 1 (fontified t)) . -253) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (#(" " 0 1 (fontified t)) . -254) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (#(" " 0 1 (fontified t)) . -255) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (#(" " 0 1 (fontified t)) . -256) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (#("?" 0 1 (face rust-question-mark fontified t)) . -257) (undo-tree-id19 . -1) (undo-tree-id20 . -1) 258 (257 . 258) (#("." 0 1 (fontified t)) . -257) (undo-tree-id21 . -1) (undo-tree-id22 . -1) 258 (253 . 257) (#("	" 0 1 (fontified t)) . -253) 254 (254 . 254) (254 . 255) (252 . 254) (t 25802 29833 470681 408000)) nil (25802 29955 396864 827000) 0 nil])
([nil nil ((113 . 125) (109 . 113) (98 . 110)) nil (25802 29955 396813 987000) 0 nil])
([nil nil ((69 . 83) (65 . 69) (#("    " 0 4 (fontified nil)) . 65) (65 . 69) (64 . 66) (62 . 65) (49 . 62) (#("l" 0 1 (fontified t)) . -49) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (#("o" 0 1 (fontified t)) . -50) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (#("g" 0 1 (fontified t)) . -51) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (#("i" 0 1 (fontified t)) . -52) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (#("n" 0 1 (fontified t)) . -53) (undo-tree-id31 . -1) (undo-tree-id32 . -1) 54 (50 . 54) (45 . 50) (#("s" 0 1 (fontified t)) . -45) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (#("t" 0 1 (fontified t)) . -46) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -47) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (#("u" 0 1 (fontified t)) . -48) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (#("c" 0 1 (fontified t)) . -49) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -50) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (#(" " 0 1 (fontified t)) . -51) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -52) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -53) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -54) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -55) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -56) (undo-tree-id55 . -1) (undo-tree-id56 . -1) 57 (52 . 57) (#(";" 0 1 (fontified t)) . -52) (undo-tree-id57 . -1) (undo-tree-id58 . -1) 53 (51 . 53) (45 . 51) (44 . 45) (t 25802 29955 860398 633000)) nil (25802 30012 691948 460000) 0 nil])
([nil nil ((48 . 55) (t 25802 30013 170752 228000)) nil (25802 30018 893874 281000) 0 nil])
([nil nil ((157 . 170) (#("Login" 0 5 (fontified nil)) . 157) (157 . 162) (#("LoginResponse" 0 13 (fontified nil)) . -157) (157 . 170) (#("Login" 0 5 (face font-lock-type-face fontified t)) . -157) (undo-tree-id59 . -5) (undo-tree-id60 . -5) (undo-tree-id61 . -5) (undo-tree-id62 . -5) (undo-tree-id63 . -5) (undo-tree-id64 . -5) (undo-tree-id65 . -5) (undo-tree-id66 . -5) (undo-tree-id67 . -5) (undo-tree-id68 . -5) (undo-tree-id69 . -5) (undo-tree-id70 . -5) (undo-tree-id71 . -5) (undo-tree-id72 . -5) (undo-tree-id73 . -5) (undo-tree-id74 . -5) (undo-tree-id75 . -5) (undo-tree-id76 . -5) (undo-tree-id77 . -5) (undo-tree-id78 . -5) (undo-tree-id79 . -5) (undo-tree-id80 . -5) (undo-tree-id81 . -5) (undo-tree-id82 . -5) (undo-tree-id83 . -5) (undo-tree-id84 . -5) (undo-tree-id85 . -5) (undo-tree-id86 . -5) (undo-tree-id87 . -5) (undo-tree-id88 . -5) (undo-tree-id89 . -5) (undo-tree-id90 . -5) (undo-tree-id91 . -5) (undo-tree-id92 . -5) (undo-tree-id93 . -5) (undo-tree-id94 . -5) (undo-tree-id95 . -5) (undo-tree-id96 . -5) (undo-tree-id97 . -5) (undo-tree-id98 . -5) (undo-tree-id99 . -5) (undo-tree-id100 . -5) (undo-tree-id101 . -5) (undo-tree-id102 . -5) (undo-tree-id103 . -5) (undo-tree-id104 . -5) (undo-tree-id105 . -1) (undo-tree-id106 . -5) (undo-tree-id107 . -5) (undo-tree-id108 . -5) (undo-tree-id109 . -5) (undo-tree-id110 . -5) (undo-tree-id111 . -5) 162 (157 . 162) (t 25802 30018 922788 269000)) nil (25802 30037 560372 526000) 0 nil])
([nil nil ((348 . 355) (341 . 348) (t 25802 30037 570905 775000)) nil (25802 30080 856278 317000) 0 nil])
([nil nil ((98 . 104) (t 25802 30080 889182 450000)) nil (25802 30101 370910 380000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t)) . -399) (undo-tree-id112 . -1) (undo-tree-id113 . -1) 400 (399 . 400) (#("]" 0 1 (face font-lock-type-face fontified nil)) . -399) (399 . 400) (386 . 399) (#("Log" 0 3 (fontified nil)) . 386) (386 . 389) (#("LoginResponse" 0 13 (fontified nil)) . -386) (386 . 399) (#("Log" 0 3 (face font-lock-type-face fontified t)) . -386) (undo-tree-id114 . -3) 389 (386 . 389) (#(">" 0 1 (fontified nil)) . -386) (386 . 387) (383 . 387) (378 . 385) (370 . 378) (#("res" 0 3 (fontified nil)) . 370) (370 . 373) (#("response" 0 8 (fontified nil)) . -370) (370 . 378) (#("res" 0 3 (fontified t)) . -370) (undo-tree-id115 . -3) (undo-tree-id116 . -3) 373 (370 . 373) (367 . 371) (362 . 367) (t 25802 30101 378315 14000) 309) nil (25802 30158 827418 988000) 0 nil])
([nil nil ((347 . 348) (t 25802 30159 282695 155000)) nil (25802 30172 55305 955000) 0 nil])
([nil nil ((64 . 72) (#("i" 0 1 (face font-lock-preprocessor-face fontified t)) . -64) (undo-tree-id117 . -1) (#("e" 0 1 (face font-lock-preprocessor-face fontified t)) . -65) (undo-tree-id118 . -1) (#("a" 0 1 (face font-lock-preprocessor-face fontified t)) . -66) (undo-tree-id119 . -1) 67 (61 . 67) (#("R" 0 1 (face font-lock-preprocessor-face fontified t)) . -61) (undo-tree-id120 . -1) 62 (54 . 62) (#("D" 0 1 (face font-lock-preprocessor-face fontified t)) . -54) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (#("e" 0 1 (face font-lock-preprocessor-face fontified t)) . -55) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (#("s" 0 1 (face font-lock-preprocessor-face fontified t)) . -56) (undo-tree-id125 . -1) (undo-tree-id126 . -1) 57 (54 . 57) (47 . 55) (45 . 48) (45 . 46) 55 (t 25802 30172 63780 93000)) nil (25802 30250 651027 923000) 0 nil])
([nil nil ((433 . 434) (t 25802 30251 56312 537000)) nil (25802 30272 567955 109000) 0 nil])
([nil nil ((433 . 440) (#("?" 0 1 (face rust-question-mark fontified t)) . -433) (undo-tree-id127 . -1) 434 (t 25802 30272 576459 675000)) nil (25802 30277 867148 622000) 0 nil])
([nil nil ((#("O" 0 1 (face font-lock-type-face fontified t)) . -398) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (#("k" 0 1 (face font-lock-type-face fontified t)) . -399) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (#("(" 0 1 (fontified t)) . -400) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) 401 (t 25802 30277 882496 82000)) nil (25802 30299 389643 901000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -437) (undo-tree-id128 . 1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) 438) nil (25802 30299 389635 421000) 0 nil])
([nil nil ((#("?" 0 1 (face rust-question-mark fontified t)) . -436) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) 437 (t 25802 30299 459644 632000)) nil (25802 30336 373450 604000) 0 nil])
([nil nil ((106 . 110) (t 25802 30336 827903 727000)) nil (25802 30382 435929 886000) 0 nil])
([nil nil ((56 . 64) (53 . 56) (#("c" 0 1 (face font-lock-constant-face fontified t)) . -53) (undo-tree-id194 . -1) (#("o" 0 1 (face font-lock-constant-face fontified t)) . -54) (undo-tree-id195 . -1) (#("n" 0 1 (face font-lock-constant-face fontified t)) . -55) (undo-tree-id196 . -1) (#("s" 0 1 (face font-lock-constant-face fontified t)) . -56) (undo-tree-id197 . -1) (#("o" 0 1 (face font-lock-constant-face fontified t)) . -57) (undo-tree-id198 . -1) (#("l" 0 1 (face font-lock-constant-face fontified t)) . -58) (undo-tree-id199 . -1) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -59) (undo-tree-id200 . -1) 60 (48 . 60) (#("gloo_ne" 0 7 (fontified nil)) . 48) (48 . 55) (#("gloo_console" 0 12 (fontified nil)) . -48) (48 . 60) (#("gloo_ne" 0 7 (face font-lock-constant-face fontified t)) . -48) (undo-tree-id201 . -7) 55 (44 . 55) (43 . 44) (t 25802 30382 904226 182000) 38) nil (25802 30489 319843 47000) 0 nil])
([nil nil ((#("g" 0 1 (face font-lock-constant-face fontified t)) . 232) (t 25802 30489 338982 230000)) nil (25802 30494 667074 957000) 0 nil])
([nil nil ((#("l" 0 1 (face font-lock-constant-face fontified t)) . 232)) nil (25802 30494 667074 687000) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-constant-face fontified t)) . 232)) nil (25802 30494 667074 447000) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-constant-face fontified t)) . 232)) nil (25802 30494 667074 37000) 0 nil])
([nil nil ((#("_" 0 1 (face font-lock-constant-face fontified t)) . 232)) nil (25802 30494 667073 767000) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-constant-face fontified t)) . 232)) nil (25802 30494 667073 617000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-constant-face fontified t)) . 232)) nil (25802 30494 667073 357000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-constant-face fontified t)) . 232)) nil (25802 30494 667073 177000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . 232) (undo-tree-id204 . -1) (undo-tree-id205 . -1)) nil (25802 30494 667072 777000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . 232) (undo-tree-id202 . -1) (undo-tree-id203 . -1)) nil (25802 30494 667069 597000) 0 nil])
([nil nil ((nil rear-nonsticky nil 454 . 455) (#("
" 0 1 (fontified nil)) . -546) (454 . 547) (t 25802 30494 705020 720000)) nil (25802 30511 496849 693000) 0 nil])
([nil nil ((472 . 474) (#("login" 0 5 (face font-lock-function-name-face fontified t)) . 472) (undo-tree-id207 . -4)) nil (25802 30511 496849 343000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -544) (undo-tree-id206 . -4) (548 . 549) (#("}" 0 1 (fontified nil)) . -548) (548 . 549) (543 . 548) 473) nil (25802 30511 496848 253000) 0 nil])
([nil nil ((545 . 546)) nil (25802 30511 496840 433000) 0 nil])
([nil nil ((88 . 94) (#("s" 0 1 (face font-lock-type-face fontified t)) . -88) (undo-tree-id208 . -1) 89 (83 . 89) (80 . 83) (#("E" 0 1 (face font-lock-type-face fontified t)) . -80) (undo-tree-id209 . -1) 81 (74 . 81) (#("c" 0 1 (face font-lock-constant-face fontified t)) . -74) (undo-tree-id210 . -1) (#("o" 0 1 (face font-lock-constant-face fontified t)) . -75) (undo-tree-id211 . -1) (#("n" 0 1 (face font-lock-constant-face fontified t)) . -76) (undo-tree-id212 . -1) (#("s" 0 1 (face font-lock-constant-face fontified t)) . -77) (undo-tree-id213 . -1) (#("o" 0 1 (face font-lock-constant-face fontified t)) . -78) (undo-tree-id214 . -1) (#("l" 0 1 (face font-lock-constant-face fontified t)) . -79) (undo-tree-id215 . -1) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -80) (undo-tree-id216 . -1) 81 (69 . 81) (#("gloo_" 0 5 (fontified nil)) . 69) (69 . 74) (#("gloo_console" 0 12 (face font-lock-constant-face fontified nil)) . -69) (undo-tree-id217 . -5) (74 . 81) (#("n" 0 1 (face font-lock-constant-face fontified t)) . -74) (undo-tree-id218 . -1) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -75) (undo-tree-id219 . -1) (#("t" 0 1 (face font-lock-constant-face fontified t)) . -76) (undo-tree-id220 . -1) 77 (68 . 77) (#(" " 0 1 (fontified t)) . -68) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (#("g" 0 1 (face font-lock-constant-face fontified t)) . -69) (undo-tree-id223 . -1) 70 (65 . 70) (64 . 65) (t 25802 30511 527141 594000) 63) nil (25802 30561 266538 361000) 0 nil])
([nil nil ((#("gloo_net::http::" 0 8 (face font-lock-constant-face fontified t) 8 10 (fontified t) 10 14 (face font-lock-constant-face fontified t) 14 16 (fontified t)) . 290) (undo-tree-id224 . -15) (undo-tree-id225 . -15) (undo-tree-id226 . -15) (undo-tree-id227 . -5) (undo-tree-id228 . -5) (undo-tree-id229 . -5) (undo-tree-id230 . -5) (undo-tree-id231 . -5) (undo-tree-id232 . -5) (undo-tree-id233 . -5) (undo-tree-id234 . -5) (undo-tree-id235 . -5) (undo-tree-id236 . -5) (undo-tree-id237 . -5) (undo-tree-id238 . -5) (undo-tree-id239 . -5) (undo-tree-id240 . -5) (undo-tree-id241 . -8) (undo-tree-id242 . -8) (undo-tree-id243 . -8) (undo-tree-id244 . -8) (undo-tree-id245 . -8) (undo-tree-id246 . -8) (undo-tree-id247 . -8) (undo-tree-id248 . -8) (undo-tree-id249 . -8) (undo-tree-id250 . -8) (undo-tree-id251 . -8) (undo-tree-id252 . -8) (undo-tree-id253 . -8) (undo-tree-id254 . -8) (undo-tree-id255 . -8) (undo-tree-id256 . -8) (undo-tree-id257 . -8) (undo-tree-id258 . -8) (undo-tree-id259 . -8) (undo-tree-id260 . -8) (undo-tree-id261 . -8) (undo-tree-id262 . -8) (undo-tree-id263 . -8) (undo-tree-id264 . -8) (undo-tree-id265 . -8) (undo-tree-id266 . -8) (undo-tree-id267 . -8) (undo-tree-id268 . -8) (undo-tree-id269 . -10) (undo-tree-id270 . -10) (undo-tree-id271 . -10) (undo-tree-id272 . -10) (undo-tree-id273 . -10) (undo-tree-id274 . -10) (undo-tree-id275 . -10) (undo-tree-id276 . -10) (undo-tree-id277 . -10) (undo-tree-id278 . -10) (undo-tree-id279 . -10) (undo-tree-id280 . -10) (undo-tree-id281 . -10) (undo-tree-id282 . -10) (undo-tree-id283 . -10) (undo-tree-id284 . -10) (undo-tree-id285 . -10) (undo-tree-id286 . -10) (undo-tree-id287 . -10) (undo-tree-id288 . -10) (undo-tree-id289 . -10) (undo-tree-id290 . -10) (undo-tree-id291 . -10) (undo-tree-id292 . -10) (undo-tree-id293 . -10) (undo-tree-id294 . -10) (undo-tree-id295 . -10) (undo-tree-id296 . -10) (undo-tree-id297 . -14) (undo-tree-id298 . -14) (undo-tree-id299 . -14) (undo-tree-id300 . -14) (undo-tree-id301 . -14) (undo-tree-id302 . -14) (undo-tree-id303 . -14) (undo-tree-id304 . -14) (undo-tree-id305 . -14) (undo-tree-id306 . -14) (undo-tree-id307 . -14) (undo-tree-id308 . -14) (undo-tree-id309 . -14) (undo-tree-id310 . -14) (undo-tree-id311 . -14) (undo-tree-id312 . -14) (undo-tree-id313 . -14) (undo-tree-id314 . -14) (undo-tree-id315 . -14) (undo-tree-id316 . -14) (undo-tree-id317 . -14) (undo-tree-id318 . -14) (undo-tree-id319 . -14) (undo-tree-id320 . -14) (undo-tree-id321 . -14) (undo-tree-id322 . -14) (undo-tree-id323 . -14) (undo-tree-id324 . -14) (undo-tree-id325 . -16) (undo-tree-id326 . -16) (undo-tree-id327 . -16) (undo-tree-id328 . -16) (undo-tree-id329 . -16) (undo-tree-id330 . -16) (undo-tree-id331 . -16) (undo-tree-id332 . -16) (undo-tree-id333 . -16) (undo-tree-id334 . -16) (undo-tree-id335 . -16) (undo-tree-id336 . -16) (undo-tree-id337 . -16) (undo-tree-id338 . -16) (undo-tree-id339 . -16) (undo-tree-id340 . -16) (undo-tree-id341 . -16) (undo-tree-id342 . -16) (undo-tree-id343 . -16) (undo-tree-id344 . -16) (undo-tree-id345 . -16) (undo-tree-id346 . -16) (undo-tree-id347 . -16) (undo-tree-id348 . -16) (undo-tree-id349 . -16) (undo-tree-id350 . -16) (undo-tree-id351 . -16) (undo-tree-id352 . -16) (undo-tree-id353 . -16) (undo-tree-id354 . -16) (undo-tree-id355 . -16) (undo-tree-id356 . -16) (undo-tree-id357 . -16) (undo-tree-id358 . -16) (undo-tree-id359 . -16) (undo-tree-id360 . -16) (undo-tree-id361 . -16) (undo-tree-id362 . -16) (undo-tree-id363 . -16) (undo-tree-id364 . -16) (undo-tree-id365 . -16) (undo-tree-id366 . -16) (undo-tree-id367 . -16) (undo-tree-id368 . -16) (undo-tree-id369 . -16) (undo-tree-id370 . -16) (undo-tree-id371 . -16) (undo-tree-id372 . -16) (undo-tree-id373 . -16) (undo-tree-id374 . -16) (undo-tree-id375 . -16) (undo-tree-id376 . -16) (undo-tree-id377 . -16) (undo-tree-id378 . -15) (undo-tree-id379 . -15) (undo-tree-id380 . -15) (undo-tree-id381 . -15) (undo-tree-id382 . -15) (undo-tree-id383 . -15) (undo-tree-id384 . -15) (undo-tree-id385 . -15) (undo-tree-id386 . -15) (undo-tree-id387 . -15) (undo-tree-id388 . -15) (undo-tree-id389 . -15) (undo-tree-id390 . -15) (undo-tree-id391 . -15) (undo-tree-id392 . -15) (undo-tree-id393 . -15) (undo-tree-id394 . -15) (undo-tree-id395 . -15) (undo-tree-id396 . -15) (undo-tree-id397 . -15) (undo-tree-id398 . -15) (undo-tree-id399 . -15) (undo-tree-id400 . -15) (undo-tree-id401 . -15) (undo-tree-id402 . -15) (undo-tree-id403 . -15) (undo-tree-id404 . -15) (undo-tree-id405 . -15) (undo-tree-id406 . -15) (undo-tree-id407 . -15) (undo-tree-id408 . -16) (undo-tree-id409 . -16) 305 (t 25802 30561 738504 224000)) nil (25802 30570 111475 991000) 0 nil])
([nil nil ((nil rear-nonsticky nil 561 . 562) (#("
" 0 1 (fontified nil)) . -752) (557 . 753) 488 (t 25802 30570 119565 10000)) nil (25802 30624 130524 759000) 0 nil])
([nil nil ((540 . 545) (538 . 540) (#("u" 0 1 (face font-lock-type-face fontified t)) . -538) (undo-tree-id515 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -539) (undo-tree-id516 . -1) (#("P" 0 1 (face font-lock-type-face fontified t)) . -540) (undo-tree-id517 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -541) (undo-tree-id518 . -1) 542 (535 . 542) (#("LoginResponse" 0 1 (face font-lock-type-face fontified t) 1 13 (face font-lock-type-face fontified t)) . 535) (undo-tree-id519 . 12) (undo-tree-id520 . -12) (undo-tree-id521 . 12) (undo-tree-id522 . 12) (undo-tree-id523 . -13) (undo-tree-id524 . -13)) nil (25802 30635 1641 517000) 0 nil] [nil nil ((534 . 535) (#("<L" 0 1 (fontified t) 1 2 (face font-lock-type-face fontified t)) . 534) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -2) (undo-tree-id514 . -2) 535) ((534 . 536) (#("w" 0 1 (face font-lock-type-face fontified t)) . 534)) (25802 30624 130329 958000) 0 nil])
([nil nil ((272 . 273) (266 . 272) (#("Str" 0 3 (fontified nil)) . 266) (266 . 269) (#("String" 0 6 (fontified nil)) . -266) (266 . 272) (#("Str" 0 3 (face font-lock-type-face fontified t)) . -266) (undo-tree-id525 . -3) 269 (250 . 269) (245 . 250) (244 . 245) (238 . 244) (#("Str" 0 3 (fontified nil)) . 238) (238 . 241) (#("String" 0 6 (fontified nil)) . -238) (238 . 244) (#("Str" 0 3 (face font-lock-type-face fontified t)) . -238) (undo-tree-id526 . -3) 241 (238 . 241) (#("s" 0 1 (fontified t)) . -238) (undo-tree-id527 . -1) (#("t" 0 1 (fontified t)) . -239) (undo-tree-id528 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -240) (undo-tree-id529 . -1) (#("i" 0 1 (fontified t)) . -241) (undo-tree-id530 . -1) (#("n" 0 1 (fontified t)) . -242) (undo-tree-id531 . -1) (#("g" 0 1 (fontified t)) . -243) (undo-tree-id532 . -1) 244 (239 . 244) (228 . 239) (224 . 228) (219 . 224) (213 . 219) (#(" " 0 1 (fontified t)) . -213) (undo-tree-id533 . -1) (#(":" 0 1 (fontified t)) . -214) (undo-tree-id534 . -1) 215 (207 . 215) (203 . 207) (#("    " 0 4 (fontified nil)) . 203) (203 . 207) (202 . 204) (201 . 203) (180 . 201) (179 . 180) (178 . 179) (177 . 178) (t 25802 30635 411040 816000) 176) nil (25802 30688 368914 838000) 0 nil])
nil
([nil nil ((825 . 835) (#("MeRe" 0 4 (fontified nil)) . 825) (825 . 829) (#("MeResponse" 0 10 (fontified nil)) . -825) (825 . 835) (#("MeRe" 0 4 (face font-lock-type-face fontified t)) . -825) (undo-tree-id535 . -4) (undo-tree-id536 . -4) (undo-tree-id537 . -4) (undo-tree-id538 . -4) (undo-tree-id539 . -4) (undo-tree-id540 . -4) (undo-tree-id541 . -4) (undo-tree-id542 . -4) (undo-tree-id543 . -4) (undo-tree-id544 . -4) (undo-tree-id545 . -4) (undo-tree-id546 . -4) (undo-tree-id547 . -4) (undo-tree-id548 . -4) (undo-tree-id549 . -4) (undo-tree-id550 . -4) (undo-tree-id551 . -4) (undo-tree-id552 . -4) (undo-tree-id553 . -4) (undo-tree-id554 . -4) (undo-tree-id555 . -4) (undo-tree-id556 . -4) (undo-tree-id557 . -4) (undo-tree-id558 . -4) (undo-tree-id559 . -4) (undo-tree-id560 . -4) (undo-tree-id561 . -4) (undo-tree-id562 . -4) (undo-tree-id563 . -4) (undo-tree-id564 . -4) (undo-tree-id565 . -4) (undo-tree-id566 . -4) (undo-tree-id567 . -4) (undo-tree-id568 . -4) (undo-tree-id569 . -4) (undo-tree-id570 . -4) (undo-tree-id571 . -4) (undo-tree-id572 . -4) 829 (825 . 829) (#("LoginResponse" 0 13 (face font-lock-type-face fontified t)) . 825) (undo-tree-id573 . -12) (undo-tree-id574 . -13) (undo-tree-id575 . -13) (t 25802 30688 839432 972000)) nil (25802 30703 486238 424000) 0 nil])
([nil nil ((nil rear-nonsticky nil 178 . 179) (#("
" 0 1 (fontified nil)) . -208) (178 . 209) (t 25802 30703 888543 824000)) nil (25802 30726 320114 364000) 0 nil])
([nil nil ((444 . 445) (t 25802 30726 350709 573000)) nil (25802 31616 583796 150000) 0 nil])
([nil nil ((729 . 730) (#(";" 0 1 (face font-lock-string-face fontified t)) . -729) (undo-tree-id576 . -1) 730 (729 . 730) (t 25802 31617 159860 894000)) nil (25802 31658 639951 123000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-string-face fontified t)) . 444) (t 25802 31659 57631 103000)) nil (25802 31723 719759 831000) 0 nil])
([nil nil ((#(":" 0 1 (face font-lock-string-face fontified t)) . 728)) nil (25802 32241 258361 32000) 0 nil])
([nil nil ((625 . 631) (#("Str" 0 3 (fontified nil)) . 625) (625 . 628) (#("String" 0 6 (fontified nil)) . -625) (625 . 631) (#("Str" 0 3 (face font-lock-type-face fontified t)) . -625) (undo-tree-id1116 . -3) 628 (624 . 628) (#("&" 0 1 (fontified t)) . -624) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (#("s" 0 1 (fontified t)) . -625) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (#("t" 0 1 (fontified t)) . -626) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -627) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) 628 (617 . 628) (#("username: String, password: String" 0 8 (face font-lock-variable-name-face fontified t) 8 10 (fontified t) 10 16 (face font-lock-type-face fontified t) 16 18 (fontified t) 18 26 (face font-lock-variable-name-face fontified t) 26 28 (fontified t) 28 34 (face font-lock-type-face fontified t)) . 617) (undo-tree-id1125 . -33)) nil (25802 32278 707387 347000) 0 nil] [nil nil ((728 . 730) (#("login" 0 5 (face font-lock-string-face fontified t)) . 728) (undo-tree-id0 . -4) (t 25802 31723 751767 797000)) ((728 . 733) (#("me" 0 2 (face font-lock-string-face fontified t)) . 728) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1)) (25802 32240 362815 683000) 0 nil])
([nil nil ((#(".json(
        &json!({\"username\": username, \"password\": password}))?" 0 7 (fontified t) 7 15 (fontified t) 15 16 (face rust-ampersand-face fontified t) 16 21 (face font-lock-preprocessor-face fontified t) 21 23 (fontified t) 23 33 (face font-lock-string-face fontified t) 33 45 (fontified t) 45 55 (face font-lock-string-face fontified t) 55 68 (fontified t) 68 69 (face rust-question-mark fontified t)) . 730) (undo-tree-id1160 . -68) (undo-tree-id1161 . -68) (undo-tree-id1162 . -68) (undo-tree-id1163 . -7) (undo-tree-id1164 . -68) (undo-tree-id1165 . -68) (undo-tree-id1166 . -68) (undo-tree-id1167 . -68) (undo-tree-id1168 . -68) (undo-tree-id1169 . -68) (undo-tree-id1170 . -68) (undo-tree-id1171 . -68) (undo-tree-id1172 . -68) (undo-tree-id1173 . -68) (undo-tree-id1174 . -68) (undo-tree-id1175 . -68) (undo-tree-id1176 . -68) (undo-tree-id1177 . -68) (undo-tree-id1178 . -68) (undo-tree-id1179 . -68) (undo-tree-id1180 . -68) (undo-tree-id1181 . -68) (undo-tree-id1182 . -68) (undo-tree-id1183 . -68) (undo-tree-id1184 . -68) (undo-tree-id1185 . -68) (undo-tree-id1186 . -68) (undo-tree-id1187 . -68) (undo-tree-id1188 . -68) (undo-tree-id1189 . -69) (undo-tree-id1190 . -69) 798) nil (25802 32344 93666 507000) 0 nil] [nil nil ((#("        &json!({\"username\": username, \"password\": password}))?.send().await?;
" 0 8 (fontified t) 8 9 (face rust-ampersand-face fontified t) 9 14 (face font-lock-preprocessor-face fontified t) 14 16 (fontified t) 16 26 (face font-lock-string-face fontified t) 26 38 (fontified t) 38 48 (face font-lock-string-face fontified t) 48 61 (fontified t) 61 62 (face rust-question-mark fontified t) 62 70 (fontified t) 70 75 (face font-lock-keyword-face fontified t) 75 76 (face rust-question-mark fontified t) 76 78 (fontified t)) . 737) (undo-tree-id1084 . -77) (undo-tree-id1085 . -33) (undo-tree-id1086 . -33) (undo-tree-id1087 . -33) (undo-tree-id1088 . -33) (undo-tree-id1089 . -33) (undo-tree-id1090 . -33) (undo-tree-id1091 . -33) (undo-tree-id1092 . -33) (undo-tree-id1093 . -33) (undo-tree-id1094 . -33) (undo-tree-id1095 . -33) (undo-tree-id1096 . -33) (undo-tree-id1097 . -33) (undo-tree-id1098 . -33) (undo-tree-id1099 . -33) (undo-tree-id1100 . -33) (undo-tree-id1101 . -33) (undo-tree-id1102 . -33) (undo-tree-id1103 . -33) (undo-tree-id1104 . -33) (undo-tree-id1105 . -33) (undo-tree-id1106 . -33) (undo-tree-id1107 . -33) (undo-tree-id1108 . -33) (undo-tree-id1109 . -33) (undo-tree-id1110 . -33) (undo-tree-id1111 . -33) (undo-tree-id1112 . -33) (undo-tree-id1113 . -33) (undo-tree-id1114 . -33) (undo-tree-id1115 . -78) 770) ((737 . 815)) (25802 32278 707245 376000) 0 nil])
([nil nil ((623 . 630) (#(" " 0 1 (fontified t)) . -623) (undo-tree-id4 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -624) (undo-tree-id5 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -625) (undo-tree-id6 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -626) (undo-tree-id7 . -1) 627 (622 . 627) (#(" " 0 1 (fontified t)) . -622) (undo-tree-id8 . -1) (undo-tree-id9 . -1) 623 (617 . 623) (#("username: String, password: String" 0 8 (face font-lock-variable-name-face fontified t) 8 10 (fontified t) 10 16 (face font-lock-type-face fontified t) 16 18 (fontified t) 18 26 (face font-lock-variable-name-face fontified t) 26 28 (fontified t) 28 34 (face font-lock-type-face fontified t)) . 617) (undo-tree-id10 . -2) (undo-tree-id11 . -33) (undo-tree-id12 . -2) (undo-tree-id13 . 31) (undo-tree-id14 . -2) (undo-tree-id15 . -2) (undo-tree-id16 . -2) (undo-tree-id17 . -2) 619 (t 25802 32071 635055 573000)) ((617 . 651) (#("token " 0 5 (face font-lock-variable-name-face fontified nil) 5 6 (fontified nil)) . 617) (622 . 623) (#(": Str" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (face font-lock-type-face fontified nil) 3 4 (face font-lock-type-face fontified nil) 4 5 (face font-lock-type-face fontified nil)) . 622) (623 . 627) (#("&STring" 0 1 (face rust-ampersand-face fontified t) 1 7 (face font-lock-type-face fontified t)) . 623)) (25802 32237 101605 312000) 0 nil])
([nil nil ((778 . 781) (774 . 778) (764 . 773) (763 . 765) (#("\"" 0 1 (fontified nil)) . -763) (763 . 764) (#("\"" 0 1 (face font-lock-string-face fontified nil)) . -763) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . 764) (763 . 765) (#("\"" 0 1 (fontified nil)) . -763) (763 . 764) (762 . 764) (755 . 762) (#("forma" 0 5 (fontified nil)) . 755) (755 . 760) (#("format!" 0 7 (fontified nil)) . -755) (755 . 762) (#("forma" 0 5 (fontified t)) . -755) (undo-tree-id1128 . -5) (undo-tree-id1129 . -5) 760 (753 . 760) (750 . 752) (#("o" 0 1 (face font-lock-string-face fontified t)) . -750) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (#("p" 0 1 (face font-lock-string-face fontified t)) . -751) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) 752 (739 . 752) (738 . 740) (#("\"" 0 1 (fontified nil)) . -738) (738 . 739) (737 . 739) (731 . 737) (#("heade" 0 5 (fontified nil)) . 731) (731 . 736) (#("header" 0 6 (fontified nil)) . -731) (731 . 737) (#("heade" 0 5 (fontified t)) . -731) (undo-tree-id1134 . -3) (undo-tree-id1135 . -3) (undo-tree-id1136 . -5) 736 (734 . 736) (#("t" 0 1 (fontified t)) . -694) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) 695 (732 . 735) (#("r" 0 1 (fontified t)) . -732) (undo-tree-id1140 . -1) 733 (732 . 733) (723 . 731) (#("	" 0 1 (fontified t)) . -723) 724 (724 . 724) (724 . 725) (723 . 724) (708 . 710) (#("l" 0 1 (face font-lock-string-face fontified t)) . -708) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -709) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (#("g" 0 1 (face font-lock-string-face fontified t)) . -710) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -711) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -712) (undo-tree-id1149 . -1) 713 (691 . 694) (#("p" 0 1 (fontified t)) . -691) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (#("o" 0 1 (fontified t)) . -692) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (#("s" 0 1 (fontified t)) . -693) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) 694 (#("	" 0 1 (fontified t)) . -726) (undo-tree-id1159 . -1) 727 (726 . 727) (726 . 727) 730) nil (25802 32344 93653 927000) 0 nil])
nil
([nil nil ((624 . 630) (#("Str" 0 3 (fontified nil)) . 624) (624 . 627) (#("String" 0 6 (fontified nil)) . -624) (624 . 630) (#("Str" 0 3 (face font-lock-type-face fontified t)) . -624) (undo-tree-id1 . -3) 627 (624 . 627) (#("STring" 0 6 (face font-lock-type-face fontified t)) . 624) (undo-tree-id2 . -5) (undo-tree-id3 . -5)) ((624 . 630) (#("Str" 0 3 (face font-lock-type-face fontified nil)) . 624) (624 . 627) (#("String" 0 6 (fontified nil)) . 624) (624 . 630) (#("Str" 0 3 (fontified nil)) . 624) (624 . 627) (#("String" 0 6 (face font-lock-type-face fontified t)) . 624)) (25802 32236 767385 828000) 0 nil])
([nil nil ((755 . 756) (t 25802 32344 555571 73000)) nil (25802 32358 80585 60000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -479) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (#(" " 0 1 (fontified t)) . -480) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (#("&" 0 1 (fontified t)) . -481) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (#("j" 0 1 (fontified t)) . -482) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (#("s" 0 1 (fontified t)) . -483) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (#("o" 0 1 (fontified t)) . -484) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (#("n" 0 1 (fontified t)) . -485) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (#("!" 0 1 (fontified t)) . -486) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (#("(" 0 1 (fontified t)) . -487) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (#("{" 0 1 (fontified t)) . -488) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -489) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (#("u" 0 1 (face font-lock-string-face fontified t)) . -490) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -491) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -492) (undo-tree-id173 . -1) (undo-tree-id174 . -1) 493 (#("r" 0 1 (face font-lock-string-face fontified t)) . -493) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -494) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -495) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (#("m" 0 1 (face font-lock-string-face fontified t)) . -496) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -497) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -498) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (#(":" 0 1 (fontified t)) . -499) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (#(" " 0 1 (fontified t)) . -500) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (#("u" 0 1 (fontified t)) . -501) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (#("s" 0 1 (fontified t)) . -502) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -503) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (#("r" 0 1 (fontified t)) . -504) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (#("n" 0 1 (fontified t)) . -505) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (#("a" 0 1 (fontified t)) . -506) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (#("m" 0 1 (fontified t)) . -507) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (#("e" 0 1 (fontified t)) . -508) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (#("," 0 1 (fontified t)) . -509) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (#(" " 0 1 (fontified t)) . -510) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -511) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (#("p" 0 1 (face font-lock-string-face fontified t)) . -512) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -513) (undo-tree-id215 . -1) (undo-tree-id216 . -1) 514 (#("s" 0 1 (face font-lock-string-face fontified t)) . -514) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -515) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (#("w" 0 1 (face font-lock-string-face fontified t)) . -516) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -517) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -518) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (#("d" 0 1 (face font-lock-string-face fontified t)) . -519) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -520) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (#(":" 0 1 (fontified t)) . -521) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (#(" " 0 1 (fontified t)) . -522) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (#("p" 0 1 (fontified t)) . -523) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (#("a" 0 1 (fontified t)) . -524) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (#("s" 0 1 (fontified t)) . -525) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (#("s" 0 1 (fontified t)) . -526) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (#("w" 0 1 (fontified t)) . -527) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (#("o" 0 1 (fontified t)) . -528) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (#("r" 0 1 (fontified t)) . -529) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (#("d" 0 1 (fontified t)) . -530) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (#("}" 0 1 (fontified t)) . -531) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (#(")" 0 1 (fontified t)) . -532) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (#(")" 0 1 (fontified t)) . -533) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (#("?" 0 1 (face rust-question-mark fontified t)) . -534) (undo-tree-id257 . -1) (undo-tree-id258 . -1) 535 (t 25802 32095 197375 889000)) ((479 . 535)) (25802 32236 422497 605000) 0 nil] [nil nil ((#("    .json(
        &json!({\"username\": username, \"password\": password}))?.send().await?;
" 0 19 (fontified t) 19 20 (face rust-ampersand-face fontified t) 20 25 (face font-lock-preprocessor-face fontified t) 25 27 (fontified t) 27 37 (face font-lock-string-face fontified t) 37 49 (fontified t) 49 59 (face font-lock-string-face fontified t) 59 72 (fontified t) 72 73 (face rust-question-mark fontified t) 73 81 (fontified t) 81 86 (face font-lock-keyword-face fontified t) 86 87 (face rust-question-mark fontified t) 87 89 (fontified t)) . 462) (undo-tree-id18 . -19) (undo-tree-id19 . -88) (undo-tree-id20 . -8) (undo-tree-id21 . -19) (undo-tree-id22 . -8) (undo-tree-id23 . -8) (undo-tree-id24 . -8) (undo-tree-id25 . -8) (undo-tree-id26 . -8) (undo-tree-id27 . -8) (undo-tree-id28 . -8) (undo-tree-id29 . -8) (undo-tree-id30 . -8) (undo-tree-id31 . -8) (undo-tree-id32 . -8) (undo-tree-id33 . -8) (undo-tree-id34 . -8) (undo-tree-id35 . -8) (undo-tree-id36 . -8) (undo-tree-id37 . -8) (undo-tree-id38 . -8) (undo-tree-id39 . -8) (undo-tree-id40 . -8) (undo-tree-id41 . -8) (undo-tree-id42 . -8) (undo-tree-id43 . -8) (undo-tree-id44 . -8) (undo-tree-id45 . -8) (undo-tree-id46 . -8) (undo-tree-id47 . -8) (undo-tree-id48 . -8) (undo-tree-id49 . -8) (undo-tree-id50 . -8) (undo-tree-id51 . -8) (undo-tree-id52 . -8) (undo-tree-id53 . -8) (undo-tree-id54 . -8) (undo-tree-id55 . -8) (undo-tree-id56 . -11) (undo-tree-id57 . -19) (undo-tree-id58 . -19) (undo-tree-id59 . -19) (undo-tree-id60 . -19) (undo-tree-id61 . -19) (undo-tree-id62 . -19) (undo-tree-id63 . -19) (undo-tree-id64 . -19) (undo-tree-id65 . -19) (undo-tree-id66 . -19) (undo-tree-id67 . -19) (undo-tree-id68 . -19) (undo-tree-id69 . -19) (undo-tree-id70 . -19) (undo-tree-id71 . -19) (undo-tree-id72 . -19) (undo-tree-id73 . -19) (undo-tree-id74 . -19) (undo-tree-id75 . -19) (undo-tree-id76 . -19) (undo-tree-id77 . -19) (undo-tree-id78 . -19) (undo-tree-id79 . -19) (undo-tree-id80 . -19) (undo-tree-id81 . -19) (undo-tree-id82 . -19) (undo-tree-id83 . -19) (undo-tree-id84 . -19) (undo-tree-id85 . -19) (undo-tree-id86 . -19) (undo-tree-id87 . -19) (undo-tree-id88 . -19) (undo-tree-id89 . -19) (undo-tree-id90 . -19) (undo-tree-id91 . -19) (undo-tree-id92 . -19) (undo-tree-id93 . -19) (undo-tree-id94 . -19) (undo-tree-id95 . -19) (undo-tree-id96 . -19) (undo-tree-id97 . -19) (undo-tree-id98 . -8) (undo-tree-id99 . -19) (undo-tree-id100 . -19) (undo-tree-id101 . -19) (undo-tree-id102 . -19) (undo-tree-id103 . -19) (undo-tree-id104 . -19) (undo-tree-id105 . -19) (undo-tree-id106 . -89) 481 (t 25802 32095 197375 889000)) ((462 . 551)) (25802 32116 825528 270000) 0 nil])
([nil nil ((625 . 626) (t 25802 32358 104736 215000)) nil (25802 32363 878743 841000) 0 nil])
([nil nil ((#("    .json(
" 0 11 (fontified t)) . 462) (undo-tree-id140 . -10) (undo-tree-id141 . -8) (undo-tree-id142 . -5) 467) ((462 . 473)) (25802 32235 938876 80000) 0 nil])
([nil nil ((462 . 463) (462 . 463) 470) ((#("
" 0 1 (fontified nil)) . 462) (undo-tree-id107 . 1) (#("	" 0 1 (fontified t)) . 462) (undo-tree-id108 . -1)) (25802 32116 825328 778000) 0 nil])
([nil current ((625 . 628) (#("wString" 0 1 (fontified t) 1 7 (fontified t)) . 625) (undo-tree-id1191 . -6) (undo-tree-id1192 . 6) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -7) (undo-tree-id1282 . -7)) nil (25802 32363 878740 351000) 0 nil])
([nil nil ((427 . 430) (#("p" 0 1 (fontified t)) . -427) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (#("o" 0 1 (fontified t)) . -428) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (#("s" 0 1 (fontified t)) . -429) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (#("t" 0 1 (fontified t)) . -430) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) 431 (477 . 479) (471 . 477) (#("hea" 0 3 (fontified nil)) . 471) (471 . 474) (#("header" 0 6 (fontified nil)) . -471) (471 . 477) (#("hea" 0 3 (fontified t)) . -471) (undo-tree-id137 . -3) (undo-tree-id138 . -3) 474 (471 . 474) (462 . 470) (#("	" 0 1 (fontified t)) . -462) (undo-tree-id139 . -1) 463 (463 . 463) (463 . 464) (462 . 463) (462 . 463) 467) ((#("
" 0 1 (fontified nil)) . 462) (undo-tree-id984 . 1) (undo-tree-id985 . 1) (#("	" 0 1 (fontified nil)) . 462) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (#("." 0 1 (fontified nil)) . 463) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (462 . 463) (#("        " 0 8 (fontified nil)) . 462) (#("hea" 0 3 (fontified nil)) . 471) (undo-tree-id1032 . -3) (undo-tree-id1033 . -3) (471 . 474) (#("header" 0 6 (fontified nil)) . 471) (471 . 477) (#("hea" 0 3 (fontified nil)) . 471) (471 . 474) (#("header" 0 6 (fontified nil)) . 471) (undo-tree-id1034 . -6) (undo-tree-id1035 . -6) (undo-tree-id1036 . -6) (undo-tree-id1037 . -6) (undo-tree-id1038 . -6) (undo-tree-id1039 . -6) (undo-tree-id1040 . -6) (undo-tree-id1041 . -6) (undo-tree-id1042 . -6) (undo-tree-id1043 . -6) (undo-tree-id1044 . -6) (undo-tree-id1045 . -6) (undo-tree-id1046 . -6) (undo-tree-id1047 . -6) (undo-tree-id1048 . -6) (undo-tree-id1049 . -6) (undo-tree-id1050 . -6) (undo-tree-id1051 . -6) (undo-tree-id1052 . -6) (undo-tree-id1053 . -6) (undo-tree-id1054 . -6) (undo-tree-id1055 . -6) (undo-tree-id1056 . -6) (#("()" 0 1 (fontified t) 1 2 (fontified t)) . 477) (undo-tree-id1057 . 1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . 1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (427 . 431) (#("get" 0 3 (fontified t)) . 427)) (25802 32235 458083 121000) 0 nil])
nil
nil
([nil nil ((513 . 519) (#("}" 0 1 (fontified nil)) . -511) (511 . 512) (#("}" 0 1 (face rust-string-interpolation fontified nil)) . -511) (511 . 512) (509 . 512) (503 . 509) (#("{" 0 1 (face rust-string-interpolation fontified nil)) . -503) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (#("}" 0 1 (face rust-string-interpolation fontified t)) . 504) (503 . 505) (502 . 504) (#("\"" 0 1 (fontified nil)) . -502) (502 . 503) (501 . 503) (494 . 501) (#("for" 0 3 (fontified nil)) . 494) (494 . 497) (#("format!" 0 7 (fontified nil)) . -494) (494 . 501) (#("for" 0 3 (face font-lock-keyword-face fontified t)) . -494) (undo-tree-id111 . -3) (undo-tree-id112 . -3) 497 (494 . 497) (#("\"" 0 1 (face font-lock-string-face fontified nil)) . -494) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . 495) (494 . 496) (#("\"" 0 1 (fontified nil)) . -494) (494 . 495) (#("t" 0 1 (fontified t)) . -494) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (#("o" 0 1 (fontified t)) . -495) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (#("k" 0 1 (fontified t)) . -496) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (#("e" 0 1 (fontified t)) . -497) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (#("n" 0 1 (fontified t)) . -498) (undo-tree-id123 . -1) (undo-tree-id124 . -1) 499 (492 . 499) (478 . 491) (477 . 479) (#("\"" 0 1 (fontified nil)) . -477) (477 . 478)) ((#("\"" 0 1 (fontified nil)) . 477) (477 . 478) (#("\"\"" 0 2 (face font-lock-string-face fontified nil)) . 477) (undo-tree-id259 . -2) (undo-tree-id260 . -2) (undo-tree-id261 . -2) (undo-tree-id262 . -2) (undo-tree-id263 . -2) (undo-tree-id264 . -2) (undo-tree-id265 . -2) (undo-tree-id266 . -2) (undo-tree-id267 . -2) (undo-tree-id268 . -2) (undo-tree-id269 . -2) (undo-tree-id270 . -2) (undo-tree-id271 . -2) (undo-tree-id272 . -2) (undo-tree-id273 . -2) (undo-tree-id274 . -2) (undo-tree-id275 . -2) (undo-tree-id276 . -2) (undo-tree-id277 . -2) (undo-tree-id278 . -2) (undo-tree-id279 . -2) (undo-tree-id280 . -2) (undo-tree-id281 . -2) (undo-tree-id282 . -2) (undo-tree-id283 . -2) (undo-tree-id284 . -2) (undo-tree-id285 . -2) (undo-tree-id286 . -2) (undo-tree-id287 . -2) (undo-tree-id288 . -2) (undo-tree-id289 . -2) (undo-tree-id290 . -2) (undo-tree-id291 . -2) (undo-tree-id292 . -2) (undo-tree-id293 . -2) (undo-tree-id294 . -2) (undo-tree-id295 . -2) (undo-tree-id296 . -2) (undo-tree-id297 . -2) (undo-tree-id298 . -2) (undo-tree-id299 . -2) (undo-tree-id300 . -2) (undo-tree-id301 . -2) (undo-tree-id302 . -2) (undo-tree-id303 . -2) (undo-tree-id304 . -2) (undo-tree-id305 . -2) (undo-tree-id306 . -2) (undo-tree-id307 . -2) (undo-tree-id308 . -2) (undo-tree-id309 . -2) (undo-tree-id310 . -2) (undo-tree-id311 . -2) (undo-tree-id312 . -2) (undo-tree-id313 . -2) (undo-tree-id314 . -2) (undo-tree-id315 . -2) (undo-tree-id316 . -2) (undo-tree-id317 . -2) (undo-tree-id318 . -2) (undo-tree-id319 . -2) (undo-tree-id320 . -2) (undo-tree-id321 . -2) (undo-tree-id322 . -2) (undo-tree-id323 . -2) (undo-tree-id324 . -2) (undo-tree-id325 . -2) (undo-tree-id326 . -2) (undo-tree-id327 . -2) (undo-tree-id328 . -2) (undo-tree-id329 . -2) (undo-tree-id330 . -2) (undo-tree-id331 . -2) (undo-tree-id332 . -2) (undo-tree-id333 . -2) (undo-tree-id334 . -2) (undo-tree-id335 . -2) (undo-tree-id336 . -2) (undo-tree-id337 . -2) (undo-tree-id338 . -2) (undo-tree-id339 . -2) (undo-tree-id340 . -2) (undo-tree-id341 . -2) (undo-tree-id342 . -2) (undo-tree-id343 . -2) (undo-tree-id344 . -2) (undo-tree-id345 . -2) (undo-tree-id346 . -2) (undo-tree-id347 . -2) (undo-tree-id348 . -2) (undo-tree-id349 . -2) (undo-tree-id350 . -2) (undo-tree-id351 . -2) (undo-tree-id352 . -2) (undo-tree-id353 . -2) (undo-tree-id354 . -2) (undo-tree-id355 . -2) (undo-tree-id356 . -2) (undo-tree-id357 . -2) (undo-tree-id358 . -2) (undo-tree-id359 . -2) (undo-tree-id360 . -2) (undo-tree-id361 . -2) (undo-tree-id362 . -2) (undo-tree-id363 . -2) (undo-tree-id364 . -2) (undo-tree-id365 . -2) (undo-tree-id366 . -2) (undo-tree-id367 . -2) (undo-tree-id368 . -2) (undo-tree-id369 . -2) (undo-tree-id370 . -2) (undo-tree-id371 . -2) (undo-tree-id372 . -2) (undo-tree-id373 . -2) (undo-tree-id374 . -2) (undo-tree-id375 . -2) (undo-tree-id376 . -2) (undo-tree-id377 . -2) (undo-tree-id378 . -2) (undo-tree-id379 . -2) (undo-tree-id380 . -2) (undo-tree-id381 . -2) (undo-tree-id382 . -2) (#("Authorization" 0 13 (face font-lock-string-face fontified nil)) . 478) (#(", token" 0 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil)) . 492) (undo-tree-id383 . -1) (undo-tree-id384 . -2) (undo-tree-id385 . -2) (undo-tree-id386 . -2) (undo-tree-id387 . -2) (undo-tree-id388 . -2) (undo-tree-id389 . -2) (undo-tree-id390 . -2) (undo-tree-id391 . -2) (undo-tree-id392 . -2) (undo-tree-id393 . -2) (undo-tree-id394 . -2) (undo-tree-id395 . -2) (undo-tree-id396 . -2) (undo-tree-id397 . -2) (undo-tree-id398 . -2) (undo-tree-id399 . -2) (undo-tree-id400 . -2) (undo-tree-id401 . -2) (undo-tree-id402 . -2) (undo-tree-id403 . -2) (undo-tree-id404 . -2) (undo-tree-id405 . -2) (undo-tree-id406 . -2) (undo-tree-id407 . -2) (undo-tree-id408 . -2) (undo-tree-id409 . -2) (undo-tree-id410 . -2) (undo-tree-id411 . -2) (undo-tree-id412 . -2) (undo-tree-id413 . -2) (undo-tree-id414 . -2) (undo-tree-id415 . -2) (undo-tree-id416 . -2) (undo-tree-id417 . -2) (undo-tree-id418 . -2) (undo-tree-id419 . -2) (undo-tree-id420 . -2) (undo-tree-id421 . -2) (undo-tree-id422 . -2) (undo-tree-id423 . -2) (undo-tree-id424 . -2) (undo-tree-id425 . -2) (undo-tree-id426 . -2) (undo-tree-id427 . -2) (undo-tree-id428 . -2) (undo-tree-id429 . -2) (undo-tree-id430 . -2) (undo-tree-id431 . -2) (undo-tree-id432 . -2) (undo-tree-id433 . -2) (undo-tree-id434 . -2) (undo-tree-id435 . -2) (undo-tree-id436 . -2) (undo-tree-id437 . -2) (undo-tree-id438 . -2) (undo-tree-id439 . -2) (undo-tree-id440 . -2) (undo-tree-id441 . -2) (undo-tree-id442 . -2) (undo-tree-id443 . -2) (undo-tree-id444 . -2) (undo-tree-id445 . -2) (undo-tree-id446 . -2) (undo-tree-id447 . -2) (undo-tree-id448 . -2) (undo-tree-id449 . -2) (undo-tree-id450 . -2) (undo-tree-id451 . -2) (undo-tree-id452 . -2) (undo-tree-id453 . -2) (undo-tree-id454 . -2) (undo-tree-id455 . -2) (undo-tree-id456 . -2) (undo-tree-id457 . -2) (undo-tree-id458 . -2) (undo-tree-id459 . -2) (undo-tree-id460 . -2) (undo-tree-id461 . -2) (undo-tree-id462 . -2) (undo-tree-id463 . -2) (undo-tree-id464 . -2) (undo-tree-id465 . -2) (undo-tree-id466 . -2) (undo-tree-id467 . -2) (undo-tree-id468 . -2) (undo-tree-id469 . -2) (undo-tree-id470 . -2) (undo-tree-id471 . -2) (undo-tree-id472 . -2) (undo-tree-id473 . -2) (undo-tree-id474 . -2) (undo-tree-id475 . -2) (undo-tree-id476 . -2) (undo-tree-id477 . -2) (undo-tree-id478 . -2) (undo-tree-id479 . -2) (undo-tree-id480 . -2) (undo-tree-id481 . -2) (undo-tree-id482 . -2) (undo-tree-id483 . -2) (undo-tree-id484 . -2) (undo-tree-id485 . -2) (undo-tree-id486 . -2) (undo-tree-id487 . -2) (undo-tree-id488 . -2) (undo-tree-id489 . -2) (undo-tree-id490 . -2) (undo-tree-id491 . -2) (undo-tree-id492 . -2) (undo-tree-id493 . -2) (undo-tree-id494 . -2) (undo-tree-id495 . -2) (undo-tree-id496 . -2) (undo-tree-id497 . -2) (undo-tree-id498 . -2) (undo-tree-id499 . -2) (undo-tree-id500 . -7) (undo-tree-id501 . -7) (undo-tree-id502 . -2) (undo-tree-id503 . -2) (undo-tree-id504 . -2) (undo-tree-id505 . -2) (undo-tree-id506 . -2) (494 . 499) (#("\"" 0 1 (fontified nil)) . 494) (494 . 495) (#("\"\"" 0 1 (face font-lock-string-face fontified nil) 1 2 (face font-lock-string-face fontified nil)) . 494) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (494 . 496) (#("for" 0 3 (face font-lock-keyword-face fontified nil)) . 494) (undo-tree-id509 . -3) (undo-tree-id510 . -3) (494 . 497) (#("format!" 0 7 (fontified nil)) . 494) (494 . 501) (#("for" 0 3 (fontified nil)) . 494) (494 . 497) (#("format!" 0 7 (face rust-builtin-formatting-macro fontified nil)) . 494) (undo-tree-id511 . -7) (undo-tree-id512 . -7) (undo-tree-id513 . -7) (undo-tree-id514 . -7) (undo-tree-id515 . -7) (undo-tree-id516 . -7) (undo-tree-id517 . -7) (undo-tree-id518 . -7) (undo-tree-id519 . -7) (undo-tree-id520 . -7) (undo-tree-id521 . -7) (undo-tree-id522 . -7) (undo-tree-id523 . -7) (undo-tree-id524 . -7) (undo-tree-id525 . -7) (undo-tree-id526 . -7) (undo-tree-id527 . -7) (undo-tree-id528 . -7) (undo-tree-id529 . -7) (undo-tree-id530 . -7) (undo-tree-id531 . -7) (undo-tree-id532 . -7) (undo-tree-id533 . -7) (undo-tree-id534 . -7) (undo-tree-id535 . -7) (undo-tree-id536 . -7) (undo-tree-id537 . -7) (undo-tree-id538 . -7) (undo-tree-id539 . -7) (undo-tree-id540 . -7) (undo-tree-id541 . -7) (undo-tree-id542 . -7) (undo-tree-id543 . -7) (undo-tree-id544 . -7) (undo-tree-id545 . -7) (undo-tree-id546 . -7) (undo-tree-id547 . -7) (undo-tree-id548 . -7) (undo-tree-id549 . -7) (undo-tree-id550 . -7) (undo-tree-id551 . -7) (undo-tree-id552 . -7) (undo-tree-id553 . -7) (undo-tree-id554 . -7) (undo-tree-id555 . -7) (undo-tree-id556 . -7) (undo-tree-id557 . -7) (undo-tree-id558 . -7) (undo-tree-id559 . -7) (undo-tree-id560 . -7) (undo-tree-id561 . -7) (undo-tree-id562 . -7) (undo-tree-id563 . -7) (undo-tree-id564 . -7) (undo-tree-id565 . -7) (undo-tree-id566 . -7) (undo-tree-id567 . -7) (undo-tree-id568 . -7) (undo-tree-id569 . -7) (undo-tree-id570 . -7) (undo-tree-id571 . -7) (undo-tree-id572 . -7) (undo-tree-id573 . -7) (undo-tree-id574 . -7) (undo-tree-id575 . -7) (undo-tree-id576 . -7) (undo-tree-id577 . -7) (undo-tree-id578 . -7) (undo-tree-id579 . -7) (undo-tree-id580 . -7) (undo-tree-id581 . -7) (undo-tree-id582 . -3) (undo-tree-id583 . -3) (undo-tree-id584 . -3) (undo-tree-id585 . -3) (undo-tree-id586 . -3) (undo-tree-id587 . -3) (undo-tree-id588 . -3) (undo-tree-id589 . -7) (undo-tree-id590 . -7) (undo-tree-id591 . -7) (undo-tree-id592 . -7) (undo-tree-id593 . -7) (undo-tree-id594 . -7) (undo-tree-id595 . -7) (undo-tree-id596 . -7) (undo-tree-id597 . -7) (undo-tree-id598 . -7) (undo-tree-id599 . -7) (undo-tree-id600 . -7) (undo-tree-id601 . -7) (undo-tree-id602 . -7) (undo-tree-id603 . -7) (undo-tree-id604 . -7) (undo-tree-id605 . -7) (undo-tree-id606 . -7) (undo-tree-id607 . -7) (undo-tree-id608 . -7) (undo-tree-id609 . -7) (undo-tree-id610 . -7) (undo-tree-id611 . -7) (undo-tree-id612 . -7) (undo-tree-id613 . -7) (undo-tree-id614 . -7) (undo-tree-id615 . -7) (undo-tree-id616 . -7) (undo-tree-id617 . -7) (undo-tree-id618 . -7) (undo-tree-id619 . -7) (undo-tree-id620 . -7) (undo-tree-id621 . -7) (undo-tree-id622 . -7) (undo-tree-id623 . -7) (undo-tree-id624 . -7) (undo-tree-id625 . -7) (undo-tree-id626 . -7) (undo-tree-id627 . -7) (undo-tree-id628 . -7) (undo-tree-id629 . -7) (undo-tree-id630 . -7) (undo-tree-id631 . -7) (undo-tree-id632 . -7) (undo-tree-id633 . -7) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 501) (undo-tree-id634 . 1) (undo-tree-id635 . -1) (undo-tree-id636 . 1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (#("\"" 0 1 (fontified nil)) . 502) (502 . 503) (#("\"\"" 0 1 (face font-lock-string-face fontified nil) 1 2 (face font-lock-string-face fontified nil)) . 502) (undo-tree-id752 . -2) (undo-tree-id753 . -2) (undo-tree-id754 . -2) (undo-tree-id755 . -2) (undo-tree-id756 . -2) (undo-tree-id757 . -2) (undo-tree-id758 . -2) (undo-tree-id759 . -2) (undo-tree-id760 . -2) (undo-tree-id761 . -2) (undo-tree-id762 . -2) (undo-tree-id763 . -2) (undo-tree-id764 . -2) (undo-tree-id765 . -2) (undo-tree-id766 . -2) (undo-tree-id767 . -2) (undo-tree-id768 . -2) (undo-tree-id769 . -2) (undo-tree-id770 . -2) (undo-tree-id771 . -2) (undo-tree-id772 . -2) (undo-tree-id773 . -2) (undo-tree-id774 . -2) (undo-tree-id775 . -2) (undo-tree-id776 . -2) (undo-tree-id777 . -2) (undo-tree-id778 . -2) (undo-tree-id779 . -2) (undo-tree-id780 . -2) (undo-tree-id781 . -2) (undo-tree-id782 . -2) (undo-tree-id783 . -2) (undo-tree-id784 . -2) (undo-tree-id785 . -2) (undo-tree-id786 . -2) (undo-tree-id787 . -2) (undo-tree-id788 . -2) (undo-tree-id789 . -2) (undo-tree-id790 . -2) (undo-tree-id791 . -2) (undo-tree-id792 . -2) (undo-tree-id793 . -2) (undo-tree-id794 . -2) (undo-tree-id795 . -2) (undo-tree-id796 . -2) (undo-tree-id797 . -2) (undo-tree-id798 . -2) (undo-tree-id799 . -2) (undo-tree-id800 . -2) (undo-tree-id801 . -2) (undo-tree-id802 . -2) (undo-tree-id803 . -2) (undo-tree-id804 . -2) (undo-tree-id805 . -2) (undo-tree-id806 . -2) (undo-tree-id807 . -2) (undo-tree-id808 . -2) (undo-tree-id809 . -2) (undo-tree-id810 . -2) (undo-tree-id811 . -2) (undo-tree-id812 . -2) (undo-tree-id813 . -2) (undo-tree-id814 . -2) (undo-tree-id815 . -2) (undo-tree-id816 . -2) (undo-tree-id817 . -2) (undo-tree-id818 . -2) (undo-tree-id819 . -2) (undo-tree-id820 . -2) (undo-tree-id821 . -2) (undo-tree-id822 . -2) (undo-tree-id823 . -2) (undo-tree-id824 . -2) (undo-tree-id825 . -2) (undo-tree-id826 . -2) (undo-tree-id827 . -2) (undo-tree-id828 . -2) (undo-tree-id829 . -2) (undo-tree-id830 . -2) (undo-tree-id831 . -2) (undo-tree-id832 . -2) (undo-tree-id833 . -2) (undo-tree-id834 . -2) (undo-tree-id835 . -2) (undo-tree-id836 . -2) (undo-tree-id837 . -2) (undo-tree-id838 . -2) (undo-tree-id839 . -2) (undo-tree-id840 . -2) (undo-tree-id841 . -2) (undo-tree-id842 . -2) (undo-tree-id843 . -2) (undo-tree-id844 . -2) (undo-tree-id845 . -2) (undo-tree-id846 . -2) (undo-tree-id847 . -2) (undo-tree-id848 . -2) (undo-tree-id849 . -2) (undo-tree-id850 . -2) (undo-tree-id851 . -2) (undo-tree-id852 . -2) (undo-tree-id853 . -2) (undo-tree-id854 . -2) (undo-tree-id855 . -2) (undo-tree-id856 . -2) (undo-tree-id857 . -2) (undo-tree-id858 . -2) (undo-tree-id859 . -2) (undo-tree-id860 . -2) (undo-tree-id861 . -2) (undo-tree-id862 . -2) (undo-tree-id863 . -2) (undo-tree-id864 . -2) (undo-tree-id865 . -2) (undo-tree-id866 . -2) (undo-tree-id867 . -2) (#("{}" 0 1 (face rust-string-interpolation fontified nil) 1 2 (face rust-string-interpolation fontified nil)) . 503) (503 . 505) (#("Bearer" 0 6 (face font-lock-string-face fontified nil)) . 503) (#(" {}" 0 1 (face font-lock-string-face fontified nil) 1 2 (face rust-string-interpolation fontified nil) 2 3 (face rust-string-interpolation fontified nil)) . 509) (#("}" 0 1 (face rust-string-interpolation fontified nil)) . 511) (511 . 512) (#("}" 0 1 (fontified nil)) . 511) (511 . 512) (#(",token" 0 6 (fontified t)) . 513) (undo-tree-id868 . 4) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (t 25802 32224 653074 843000)) (25802 32224 617923 842000) 0 nil])
nil
